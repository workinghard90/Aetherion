from flask import Flask, request, jsonify
from flask_cors import CORS
import sqlite3
import json
from datetime import datetime
import os

app = Flask(__name__)
CORS(app)

DATABASE = 'universe.db'

def get_db_connection():
    conn = sqlite3.connect(DATABASE)
    return conn

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS universe (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            type TEXT,
            description TEXT,
            properties TEXT,
            created_at TEXT
        )
    ''')
    conn.commit()
    conn.close()

@app.route('/api/items', methods=['GET'])
def get_items():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM universe')
    rows = cursor.fetchall()
    conn.close()
    items = []
    for row in rows:
        items.append({
            'id': row[0],
            'name': row[1],
            'type': row[2],
            'description': row[3],
            'properties': json.loads(row[4]),
            'created_at': row[5]
        })
    return jsonify(items)

@app.route('/api/items/<int:item_id>', methods=['GET'])
def get_item(item_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM universe WHERE id=?', (item_id,))
    row = cursor.fetchone()
    conn.close()
    if row:
        return jsonify({
            'id': row[0],
            'name': row[1],
            'type': row[2],
            'description': row[3],
            'properties': json.loads(row[4]),
            'created_at': row[5]
        })
    return jsonify({'error': 'Item not found'}), 404

@app.route('/api/items', methods=['POST'])
def add_item():
    data = request.get_json()
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO universe (name, type, description, properties, created_at)
        VALUES (?, ?, ?, ?, ?)
    ''', (
        data['name'],
        data['type'],
        data.get('description', ''),
        json.dumps(data.get('properties', {})),
        datetime.utcnow().isoformat()
    ))
    conn.commit()
    conn.close()
    return jsonify({'status': 'created'}), 201

if __name__ == '__main__':
    init_db()
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

from app import app

if __name__ == "__main__":
    app.run()

Flask==2.3.3
gunicorn==21.2.0
# ... other dependencies
flask-cors==4.0.0
requests==2.31.0
python-dotenv==1.0.1
transformers==4.40.1
torch==2.3.0
sentence-transformers==2.7.0
cryptography==42.0.7

PORT=5000

[build]
  command = "pip install -r requirements.txt && python app.py"
  publish = "."
