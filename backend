{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        
        {
            "type": "cobol",
            "request": "launch",
            "name": "COBOL (native): Launch",
            "program": "${workspaceFolder}/<insert-program-name-here>",
            "cwd": "${workspaceFolder}",
            "stopOnEntry": true
        },
        {
            "type": "cobol",
            "request": "attach",
            "name": "COBOL (native): Attach to process",
            "processId": "${command:pickProcess}"
        }
    ]
}

Flask==2.3.3
gunicorn==21.2.0
flask-cors==4.0.0
requests==2.31.0
transformers==4.40.1
torch==2.3.0
sentence-transformers==2.7.0
cryptography==42.0.7
python-dotenv==1.0.1

/opt/build/repo/frontend

from flask import Flask, request, jsonify
from flask_cors import CORS
import sqlite3
import json
from datetime import datetime

app = Flask(__name__)
CORS(app)

DATABASE = 'universe.db'

def get_db_connection():
    conn = sqlite3.connect(DATABASE)
    return conn

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS universe (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            type TEXT,
            description TEXT,
            properties TEXT,
            created_at TEXT
        )
    ''')
    conn.commit()
    conn.close()

@app.route('/universe', methods=['GET'])
def get_universe():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM universe')
    rows = cursor.fetchall()
    conn.close()
    universe = []
    for row in rows:
        universe.append({
            'id': row[0],
            'name': row[1],
            'type': row[2],
            'description': row[3],
            'properties': json.loads(row[4]),
            'created_at': row[5]
        })
    return jsonify(universe)

@app.route('/universe/create', methods=['POST'])
def create_entity():
    data = request.json
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO universe (name, type, description, properties, created_at)
        VALUES (?, ?, ?, ?, ?)
    ''', (
        data['name'],
        data['type'],
        data.get('description', ''),
        json.dumps(data.get('properties', {})),
        datetime.utcnow().isoformat()
    ))
    conn.commit()
    conn.close()
    return jsonify({'status': 'created'})

@app.route('/universe/update', methods=['POST'])
def update_entity():
    data = request.json
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE universe
        SET name=?, type=?, description=?, properties=?
        WHERE id=?
    ''', (
        data['name'],
        data['type'],
        data.get('description', ''),
        json.dumps(data.get('properties', {})),
        data['id']
    ))
    conn.commit()
    conn.close()
    return jsonify({'status': 'updated'})

@app.route('/universe/delete', methods=['POST'])
def delete_entity():
    entity_id = request.json.get('id')
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('DELETE FROM universe WHERE id=?', (entity_id,))
    conn.commit()
    conn.close()
    return jsonify({'status': 'deleted'})

@app.route('/universe/event', methods=['POST'])
def trigger_event():
    data = request.json
    entity_id = data.get('target_id')
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM universe WHERE id=?', (entity_id,))
    row = cursor.fetchone()
    if row and data.get('type') == 'supernova':
        props = json.loads(row[4])
        props['state'] = 'black hole'
        cursor.execute('''
            UPDATE universe
            SET type=?, properties=?
            WHERE id=?
        ''', (
            'black hole',
            json.dumps(props),
            entity_id
        ))
        conn.commit()
        conn.close()
        return jsonify({'status': 'event_applied', 'new_type': 'black hole'})
    conn.close()
    return jsonify({'status': 'no_effect'})

if __name__ == '__main__':
    init_db()
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)


npm install

npx expo start

cd backend

python -m venv venv

source venv/bin/activate       # Windows: venv\Scripts\activate

pip install -r requirements.txt

python app.py
