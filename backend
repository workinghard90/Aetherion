from flask import Flask, request, jsonify
from flask_cors import CORS
import sqlite3, json, os
from datetime import datetime

app = Flask(__name__)
CORS(app)

DATABASE = os.environ.get('DATABASE_URL', 'universe.db')

def get_db_connection():
    conn = sqlite3.connect(DATABASE)
    return conn

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS universe (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            type TEXT,
            description TEXT,
            properties TEXT,
            created_at TEXT
        )
    ''')
    conn.commit()
    conn.close()

@app.route('/api/items', methods=['GET'])
def get_items():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM universe')
    rows = cursor.fetchall()
    conn.close()
    result = []
    for r in rows:
        result.append({
            'id': r[0],
            'name': r[1],
            'type': r[2],
            'description': r[3],
            'properties': json.loads(r[4] or '{}'),
            'created_at': r[5]
        })
    return jsonify(result)

@app.route('/api/items/<int:item_id>', methods=['GET'])
def get_item(item_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM universe WHERE id=?', (item_id,))
    r = cursor.fetchone()
    conn.close()
    if not r:
        return jsonify({'error': 'Not found'}), 404
    return jsonify({
        'id': r[0],
        'name': r[1],
        'type': r[2],
        'description': r[3],
        'properties': json.loads(r[4] or '{}'),
        'created_at': r[5]
    })

@app.route('/api/items', methods=['POST'])
def create_item():
    data = request.get_json()
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO universe (name, type, description, properties, created_at)
        VALUES (?, ?, ?, ?, ?)
    ''', (
        data.get('name'),
        data.get('type'),
        data.get('description', ''),
        json.dumps(data.get('properties', {})),
        datetime.utcnow().isoformat()
    ))
    conn.commit()
    conn.close()
    return jsonify({'status': 'created'}), 201

@app.route('/api/items/<int:item_id>', methods=['PUT'])
def update_item(item_id):
    data = request.get_json()
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE universe
        SET name=?, type=?, description=?, properties=?
        WHERE id=?
    ''', (
        data.get('name'),
        data.get('type'),
        data.get('description', ''),
        json.dumps(data.get('properties', {})),
        item_id
    ))
    conn.commit()
    conn.close()
    return jsonify({'status': 'updated'})

@app.route('/api/items/<int:item_id>', methods=['DELETE'])
def delete_item(item_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('DELETE FROM universe WHERE id=?', (item_id,))
    conn.commit()
    conn.close()
    return jsonify({'status': 'deleted'})

if __name__ == '__main__':
    init_db()
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)

from app import app

if __name__ == "__main__":
    app.run()

Flask==2.3.3
flask-cors==4.0.0
gunicorn==21.2.0
python-dotenv==1.0.1

{
  "app_name": "AetherionAI Universe API",
  "version": "1.0.0",
  "debug": true
}

web: gunicorn wsgi:app

PORT=10000
DATABASE_URL=universe.db
