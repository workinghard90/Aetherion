{"ast":null,"code":"var _jsxFileName = \"/workspaces/Aetherion/frontend/screens/OracleScreen.js\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { getOracleInsights } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OracleScreen() {\n  const [prompt, setPrompt] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState(null);\n  const handleSubmit = async () => {\n    if (!prompt.trim()) {\n      Alert.alert(\"Error\", \"Please enter a prompt\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const res = await getOracleInsights(prompt);\n      setResult(res);\n    } catch (err) {\n      Alert.alert(\"Error\", err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return _jsxDEV(ScrollView, {\n    contentContainerStyle: styles.container,\n    children: [_jsxDEV(Text, {\n      style: styles.title,\n      children: \"\\uD83C\\uDF3F Grove Oracle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), _jsxDEV(TextInput, {\n      style: styles.input,\n      placeholder: \"Ask the oracle...\",\n      placeholderTextColor: \"#aaa\",\n      multiline: true,\n      value: prompt,\n      onChangeText: setPrompt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), _jsxDEV(TouchableOpacity, {\n      style: styles.button,\n      onPress: handleSubmit,\n      children: loading ? _jsxDEV(ActivityIndicator, {\n        size: \"small\",\n        color: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this) : _jsxDEV(Text, {\n        style: styles.buttonText,\n        children: \"Get Insights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), result && _jsxDEV(View, {\n      style: styles.resultContainer,\n      children: _jsxDEV(Text, {\n        style: styles.resultText,\n        children: JSON.stringify(result, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\nconst styles = StyleSheet.create({\n  container: {\n    flexGrow: 1,\n    backgroundColor: \"#1e1e2e\",\n    padding: 20\n  },\n  title: {\n    fontSize: 24,\n    color: \"#e0c0ff\",\n    marginBottom: 20,\n    textAlign: \"center\"\n  },\n  input: {\n    backgroundColor: \"#2e2e3e\",\n    color: \"#fff\",\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 12,\n    height: 100,\n    textAlignVertical: \"top\"\n  },\n  button: {\n    backgroundColor: \"#8e44ad\",\n    padding: 14,\n    borderRadius: 8,\n    alignItems: \"center\",\n    marginBottom: 20\n  },\n  buttonText: {\n    color: \"#fff\",\n    fontSize: 16\n  },\n  resultContainer: {\n    backgroundColor: \"#2e2e3e\",\n    padding: 12,\n    borderRadius: 8\n  },\n  resultText: {\n    color: \"#fff\",\n    fontSize: 14\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","TextInput","TouchableOpacity","ScrollView","ActivityIndicator","StyleSheet","Alert","getOracleInsights","jsxDEV","_jsxDEV","OracleScreen","prompt","setPrompt","loading","setLoading","result","setResult","handleSubmit","trim","alert","res","err","message","contentContainerStyle","styles","container","children","style","title","fileName","_jsxFileName","lineNumber","columnNumber","input","placeholder","placeholderTextColor","multiline","value","onChangeText","button","onPress","size","color","buttonText","resultContainer","resultText","JSON","stringify","create","flexGrow","backgroundColor","padding","fontSize","marginBottom","textAlign","borderRadius","height","textAlignVertical","alignItems"],"sources":["/workspaces/Aetherion/frontend/screens/OracleScreen.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  ActivityIndicator,\n  StyleSheet,\n  Alert,\n} from \"react-native\";\nimport { getOracleInsights } from \"../services/api\";\n\nexport default function OracleScreen() {\n  const [prompt, setPrompt] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState(null);\n\n  const handleSubmit = async () => {\n    if (!prompt.trim()) {\n      Alert.alert(\"Error\", \"Please enter a prompt\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const res = await getOracleInsights(prompt);\n      setResult(res);\n    } catch (err) {\n      Alert.alert(\"Error\", err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <Text style={styles.title}>ðŸŒ¿ Grove Oracle</Text>\n      <TextInput\n        style={styles.input}\n        placeholder=\"Ask the oracle...\"\n        placeholderTextColor=\"#aaa\"\n        multiline\n        value={prompt}\n        onChangeText={setPrompt}\n      />\n      <TouchableOpacity style={styles.button} onPress={handleSubmit}>\n        {loading ? (\n          <ActivityIndicator size=\"small\" color=\"#fff\" />\n        ) : (\n          <Text style={styles.buttonText}>Get Insights</Text>\n        )}\n      </TouchableOpacity>\n\n      {result && (\n        <View style={styles.resultContainer}>\n          <Text style={styles.resultText}>\n            {JSON.stringify(result, null, 2)}\n          </Text>\n        </View>\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexGrow: 1,\n    backgroundColor: \"#1e1e2e\",\n    padding: 20,\n  },\n  title: {\n    fontSize: 24,\n    color: \"#e0c0ff\",\n    marginBottom: 20,\n    textAlign: \"center\",\n  },\n  input: {\n    backgroundColor: \"#2e2e3e\",\n    color: \"#fff\",\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 12,\n    height: 100,\n    textAlignVertical: \"top\",\n  },\n  button: {\n    backgroundColor: \"#8e44ad\",\n    padding: 14,\n    borderRadius: 8,\n    alignItems: \"center\",\n    marginBottom: 20,\n  },\n  buttonText: {\n    color: \"#fff\",\n    fontSize: 16,\n  },\n  resultContainer: {\n    backgroundColor: \"#2e2e3e\",\n    padding: 12,\n    borderRadius: 8,\n  },\n  resultText: {\n    color: \"#fff\",\n    fontSize: 14,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}