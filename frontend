AetherionAI-Mobile/
├── frontend/
│   ├── App.js
│   ├── app.json
│   ├── babel.config.js
│   ├── package.json
│   ├── netlify.toml
│   ├── .env
│   ├── assets/
│   │   ├── icon.png
│   │   ├── splash.png
│   │   └── favicon.png
│   ├── screens/
│   │   └── HomeScreen.js
│   └── services/
│       └── api.js│
├── backend/                    # Flask API backend (deployed to Render)
│   ├── app.py                  # Main Flask app
│   ├── wsgi.py                 # Render entrypoint (for gunicorn)
│   ├── requirements.txt        # Python dependencies
│   ├── .env                    # Flask env variables (optional)
│
├── README.md                   # Docs and launch instructions
└── setup.sh                    # Setup script (optional)

import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import HomeScreen from './screens/HomeScreen';

const Stack = createStackNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen 
          name="Home" 
          component={HomeScreen} 
          options={{
            title: 'AetherionAI Universe',
            headerStyle: { backgroundColor: '#6200ee' },
            headerTintColor: '#fff',
            headerTitleStyle: { fontWeight: 'bold' },
          }}
        />
      </Stack.Navigator>
    </NavigationContainer>
  );
}



{
  "expo": {
    "name": "AetherionAI Mobile",
    "slug": "aetherionai-mobile",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "light",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "assetBundlePatterns": ["**/*"],
    "ios": { "supportsTablet": true },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/icon.png",
        "backgroundColor": "#ffffff"
      }
    },
    "web": { "favicon": "./assets/favicon.png" }
  }
}

module.exports = function(api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};

{
  "name": "aetherionai-mobile",
  "version": "1.0.0",
  "main": "node_modules/expo/AppEntry.js",
  "scripts": {
    "start": "expo start",
    "web": "expo start --web",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "build": "expo export:web",
    "deploy": "gh-pages -d web-build"
  },
  "dependencies": {
    "@react-navigation/native": "^6.1.8",
    "@react-navigation/stack": "^6.3.20",
    "axios": "^1.6.7",
    "expo": "~50.0.6",
    "expo-status-bar": "~1.11.1",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-native": "0.73.6",
    "react-native-gesture-handler": "~2.14.0",
    "react-native-safe-area-context": "4.8.2",
    "react-native-screens": "~3.29.0",
    "react-native-web": "~0.19.6"
  },
  "devDependencies": {
    "gh-pages": "^6.1.1"
  },
  "private": true,
  "homepage": "https://workinghard90.github.io/AetherionAI-Mobile"
}

[build]
  base = "frontend"
  publish = "web-build"
  command = "npm run build"

[context.production.environment]
  NODE_VERSION = "18"

[build.environment]
  EXPO_PUBLIC_API_URL = "https://aetherionai.onrender.com"

[[redirects]]
  from = "/api/*"
  to = "https://aetherionai.onrender.com/api/:splat"
  status = 200

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

EXPO_PUBLIC_API_URL=https://aetherionai.onrender.com

#!/bin/bash

git add netlify.toml
git commit -m "Add Netlify config for frontend build"
git push origin main

# Create folders and assets if they don't exist
mkdir -p assets screens services

# Create placeholder files
touch assets/icon.png
touch assets/splash.png
touch assets/favicon.png

# Write environment variable
echo "EXPO_PUBLIC_API_URL=https://aetherionai.onrender.com" > .env

# Install dependencies
npm install

echo "✅ Project structure is set up. Run 'npm start' or 'npm run web' to begin."

import React, { useEffect, useState } from 'react';
import { View, Text, FlatList, TouchableOpacity, StyleSheet, ActivityIndicator } from 'react-native';
import { getUniverse } from '../services/api';

import React, { useEffect, useState } from 'react';
import { View, Text, FlatList, TouchableOpacity, StyleSheet, ActivityIndicator } from 'react-native';
import { getUniverse } from '../services/api';

export default function HomeScreen() {
  const [entities, setEntities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchEntities();
  }, []);

  const fetchEntities = async () => {
    try {
      setLoading(true);
      const data = await getUniverse();
      setEntities(data);
      setError(null);
    } catch (err) {
      console.error('Failed to fetch entities:', err);
      setError('Failed to load data. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <View style={styles.centered}>
        <ActivityIndicator size="large" color="#6200ee" />
        <Text style={styles.loadingText}>Loading universe data...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.centered}>
        <Text style={styles.errorText}>{error}</Text>
        <TouchableOpacity style={styles.retryButton} onPress={fetchEntities}>
          <Text style={styles.retryButtonText}>Retry</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <FlatList
        data={entities}
        keyExtractor={(item) => item.id.toString()}
        renderItem={({ item }) => (
          <TouchableOpacity style={styles.itemContainer}>
            <View>
              <Text style={styles.itemTitle}>{item.name}</Text>
              <Text style={styles.itemDescription}>{item.description}</Text>
            </View>
          </TouchableOpacity>
        )}
        ListEmptyComponent={
          <Text style={styles.emptyText}>No entities found in the universe.</Text>
        }
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16, backgroundColor: '#f5f5f5' },
  centered: { flex: 1, justifyContent: 'center', alignItems: 'center', padding: 20 },
  loadingText: { marginTop: 10, color: '#6200ee', fontSize: 16 },
  errorText: { color: 'red', textAlign: 'center', marginBottom: 20 },
  retryButton: {
    backgroundColor: '#6200ee', paddingHorizontal: 20,
    paddingVertical: 10, borderRadius: 5
  },
  retryButtonText: { color: 'white', fontWeight: 'bold' },
  itemContainer: {
    backgroundColor: 'white', padding: 16, marginVertical: 8,
    borderRadius: 8, shadowColor: '#000', shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1, shadowRadius: 4, elevation: 2
  },
  itemTitle: { fontSize: 18, fontWeight: 'bold', marginBottom: 6 },
  itemDescription: { fontSize: 14, color: '#666' },
  emptyText: { textAlign: 'center', marginTop: 50, fontSize: 16, color: '#666' }
});

import axios from 'axios';

const API_URL = process.env.EXPO_PUBLIC_API_URL || 'http://localhost:5000';

export const getUniverse = async () => {
  try {
    const response = await axios.get(`${API_URL}/api/items`);
    return response.data;
  } catch (error) {
    console.error('API error in getUniverse:', error);
    throw error;
  }
};

export const getEntityById = async (id) => {
  try {
    const response = await axios.get(`${API_URL}/api/items/${id}`);
    return response.data;
  } catch (error) {
    console.error(`API error in getEntityById for id ${id}:`, error);
    throw error;
  }
};